name: Poetry Dynamic Release

description: 'Do a dynamic semver release for poetry'
inputs:
  poetry-update:
    description: 'Whether to upgrade poetry'
    required: false
    default: false
  git-username:
    description: 'Github username'
    required: true
  git-email:
    description: 'Github email'
    required: true
  git-gpg-email:
    description: 'Git gpg signing key email'
    required: true
outputs:
  pre-release:
    description: 'Prerelease version'
    value: ${{ steps.version.outputs.next_prerelease }}
  release:
    description: 'Selease version'
    value: ${{ steps.version.outputs.next_release }}
runs:
  using: 'composite'
  steps:
    - name: Update the dependencies using poetry
      id: update
      shell: bash
      run: |
        [ ${{ inputs.poetry-update }} == true ] && poetry update
    - name: Install the project
      id: install
      shell: bash
      run: |
        poetry install --remove-untracked
        poetry config --list

        echo "=============================="
        echo "Run format/test/lint"
        echo "++++++++++++++++++++++++++++++"
        poe format-imports
        poe format
        poe test
        # Show the plugins used for linting
        poe lint-plugins
        # exit-zero treats all errors as warnings.
        poe lint --count --exit-zero --statistics || true

    - name: Setup git config
      id: git
      shell: bash
      run: |
        echo "::set-output name=diff::$(git diff FETCH_HEAD --stat)"
        echo "=============================="
        echo "Setup git config"
        echo "++++++++++++++++++++++++++++++"
        git config user.name "${{ inputs.git-username }}"
        git config user.email ${{ inputs.git-email }}
        git config user.signkey ${{ inputs.git-gpg-email }}
        git config commit.gpgsign true
        git config init.defaultBranch main
        git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git

    - name: Delete Prerelease
      id: delete
      shell: bash
      run: |
        echo "=============================="
        echo "Delete Prerelease"
        echo "++++++++++++++++++++++++++++++"

        prerelease="$((gh release list | grep -i pre-release || true) | cut -f1)"
        echo "Pre release: $prerelease"
        echo "::set-output name=prerelease::$prerelease"
        if [[ -n "${prerelease}" ]]; then
          echo "Current pre-release - $prerelease"

          if [[ -z "$(git diff "$prerelease" --stat)" ]]; then
            echo "Skipping delete... the prev release content diff is the same"
            echo "::set-output name=diff::$(git diff "$prerelease" --stat)"
            exit 0
          fi

          gh release delete -y "${prerelease}" || true
          major="$(echo $prerelease | sed -re 's|^v([0-9]+).([0-9]+).([0-9]+)(.*)|\1|g')"
          minor="$(echo $prerelease | sed -re 's|^v([0-9]+).([0-9]+).([0-9]+)(.*)|\2|g')"
          pre_maj_min="v${major}.${minor}*"
          echo "Delete pre-release tag if exists - $(git tag -l "$pre_maj_min")"
          git tag -l "$pre_maj_min" | xargs -I{} git push --delete origin {} || true
          git tag -l "$pre_maj_min" | xargs -I{} git tag --delete {} || true
        fi

    - name: Version Evaluation
      id: version
      shell: bash
      run: |
        echo "=============================="
        echo "Version Evaluation"
        echo "++++++++++++++++++++++++++++++"
        prev_release="$((gh release list | grep -i latest || true) | cut -f1)"

        if [[ -n "${{ steps.delete.outputs.prerelease }}" ]] && [[ -z "${{ steps.delete.outputs.diff }}" ]]; then
          echo "Content diff is the same as Pre-release: ${{ steps.delete.outputs.prerelease }}"
          echo "::set-output name=diff::${{ steps.delete.outputs.diff }}"
          exit 0
        elif [[ -n "$prev_release" ]] && [[ -z "$(git diff "$prev_release" --stat)" ]]; then
          echo "Content diff is the same as Release: $prev_release"
          echo "::set-output name=diff::$(git diff "$prev_release" --stat)"
          exit 0
        fi

        poetry-dynamic-versioning
        echo "dynamic: $(poetry version -s) release: $prev_release"
        version_base="$(poetry version -s | sed -re 's|^([0-9.]+)([abrc]*)([0-9]*)|\1|g')"
        version_stage="$(poetry version -s | sed -re 's|^([0-9.]+)([abrc]*)([0-9]*)|\2|g')"
        version_revision="$(poetry version -s | sed -re 's|^([0-9.]+)([abrc]*)([0-9]*)|\3|g')"
        echo "::set-output name=version_base::$version_base"
        echo "::set-output name=version_stage::$version_stage"
        echo "::set-output name=version_revision::$version_revision"
        echo "::set-output name=version_full::$(poetry version -s)"
        echo "$version_base $version_stage $version_revision $version_full"
        poetry version minor
        next_base="$(poetry version -s | sed -re 's|^([0-9.]+)([abrc]*)([0-9]*)|\1|g')"
        major="$(echo $next_base | sed -re 's|^([0-9]+).([0-9]+).([0-9]+)|\1|g')"
        minor="$(echo $next_base | sed -re 's|^([0-9]+).([0-9]+).([0-9]+)|\2|g')"
        next_release="${major}.${minor}.${version_revision}"
        next_prerelease="${next_base}${version_stage}${version_revision}"
        echo "$next_base $next_release $next_prerelease"
        echo "::set-output name=next_tag::$next_release"
        echo "::set-output name=next_base::$next_base"
        echo "::set-output name=next_release::$next_release"
        echo "::set-output name=next_prerelease::${next_prerelease}"

    - name: Release Evaluation ${{ steps.version.outputs.next_release }}
      id: release
      shell: bash
      run: |
        echo "=============================="
        echo "Release Evaluation"
        echo "++++++++++++++++++++++++++++++"

        if [[ -z "${{ steps.version.outputs.next_base }}" ]]; then
          echo "Skipping, no release version evaluated..."
          exit 0
        fi

        release="no"
        prerelease="no"
        if [[ "${{ steps.version.outputs.version_stage }}" == "rc" ]] && [[ ${{ steps.version.outputs.version_revision }} -ge 3 ]]; then
          release="yes"
        else
          prerelease="yes"
        fi

        if [[ "$release" == "yes" ]]; then
          echo "Set Release Version ${{ steps.version.outputs.version_full }} -> ${{ steps.version.outputs.next_release }}"
          poetry version ${{ steps.version.outputs.next_release }}
        elif [[ "$prerelease" == "yes" ]]; then
          echo "Set Prerelease Version ${{ steps.version.outputs.version_full }} -> ${{ steps.version.outputs.next_prerelease }}"
          poetry version ${{ steps.version.outputs.next_prerelease }}
        fi

        if [[ "$release" == "yes" ]] || [[ "$prerelease" == "yes" ]]; then
          echo "Commit ${{ steps.version.outputs.next_release }}"
          poetry run cz changelog --unreleased-version "v$(poetry version -s)"
          git add .
          git status
          git commit -S -m "ci(github-actions): :construction_worker: v$(poetry version -s)"
        fi


        if [[ "$release" == "yes" ]]; then
          echo "Release ${{ steps.version.outputs.next_release }}"
          prev_release="$((gh release list | grep -i latest || true) | cut -f1)"
          echo $prev_release
          [[ "v${{ steps.version.outputs.next_release }}" == "${prev_release}" ]] && exit 0
          git tag "v${{ steps.version.outputs.next_release }}" -m "v${{ steps.version.outputs.next_release }}"
          git push --follow-tags
          poetry build
          echo "" > NEW_RELEASE.md
          poetry run cz changelog --unreleased-version "v${{ steps.version.outputs.next_release }}" --start-rev "${prev_release}" --file-name NEW_RELEASE.md || true
          gh release create "v${{ steps.version.outputs.next_release }}" -F NEW_RELEASE.md ./dist/*.tar.gz ./dist/*.whl
        elif [[ "$prerelease" == "yes" ]]; then
          echo "Prerelease ${{ steps.version.outputs.next_prerelease }}"
          prev_release="$((gh release list | grep -i latest || true) | cut -f1)"
          prev_prerelease="$((gh release list | grep -i pre-release || true) | cut -f1)"
          echo "$prev_release $prev_prerelease"
          [[ "v${{ steps.version.outputs.next_prerelease }}" == "${prev_release}" ]] && exit 0
          [[ "v${{ steps.version.outputs.next_prerelease }}" == "${prev_prerelease}" ]] && exit 0
          git tag "v${{ steps.version.outputs.next_prerelease }}" -m "v${{ steps.version.outputs.next_prerelease }}"
          git push --follow-tags
          poetry build
          echo "" > NEW_RELEASE.md
          poetry run cz changelog --unreleased-version "v${{ steps.version.outputs.next_prerelease }}" --start-rev "${prev_release}" --file-name NEW_RELEASE.md || true
          gh release create "v${{ steps.version.outputs.next_prerelease }}" --prerelease -F NEW_RELEASE.md ./dist/*.tar.gz ./dist/*.whl
        fi
